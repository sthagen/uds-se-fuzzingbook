<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 12.2.1 (20241206.2353)
 -->
<!-- Pages: 1 -->
<svg width="318pt" height="478pt"
 viewBox="0.00 0.00 317.62 478.25" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 474.25)">
<g id="a_graph0"><a xlink:title="ConcolicGrammarFuzzer class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-474.25 313.62,-474.25 313.62,4 -4,4"/>
</a>
</g>
<!-- ConcolicGrammarFuzzer -->
<g id="node1" class="node">
<title>ConcolicGrammarFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class ConcolicGrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="5.62,-0.5 5.62,-111 172.38,-111 172.38,-0.5 5.62,-0.5"/>
<text text-anchor="start" x="13.62" y="-94.7" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ConcolicGrammarFuzzer</text>
<polyline fill="none" stroke="black" points="5.62,-85 172.38,-85"/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="ConcolicGrammarFuzzer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="fuzz(self):&#10;Produce a string from the grammar.">
<text text-anchor="start" x="41" y="-72.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="coalesce(self, children)">
<text text-anchor="start" x="41" y="-58.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">coalesce()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="prune_tokens(self, tokens)">
<text text-anchor="start" x="41" y="-46" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">prune_tokens()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="prune_tree(self, tree, tokens)">
<text text-anchor="start" x="41" y="-33.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">prune_tree()</text>
</a>
</g>
<g id="a_node1_5"><a xlink:href="#" xlink:title="tree_to_string(self, tree)">
<text text-anchor="start" x="41" y="-20.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">tree_to_string()</text>
</a>
</g>
<g id="a_node1_6"><a xlink:href="#" xlink:title="update_grammar(self, trace)">
<text text-anchor="start" x="41" y="-7.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">update_grammar()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer -->
<g id="node2" class="node">
<title>GrammarFuzzer</title>
<g id="a_node2"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="0,-148 0,-347.75 178,-347.75 178,-148 0,-148"/>
<text text-anchor="start" x="39.12" y="-331.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="0,-321.75 178,-321.75"/>
<g id="a_node2_7"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node2_8"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Union[str, Tuple[str, Dict[str, Any]]]]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text text-anchor="start" x="8" y="-309.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_9"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="check_grammar(self) &#45;&gt; None:&#10;Check the grammar passed">
<text text-anchor="start" x="8" y="-296.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">check_grammar()</text>
</a>
</g>
<g id="a_node2_10"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_node_expansion(self, node: Tuple[str, Optional[List[Any]]], children_alternatives: List[List[Tuple[str, Optional[List[Any]]]]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text text-anchor="start" x="8" y="-283.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node2_11"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="choose_tree_expansion(self, tree: Tuple[str, Optional[List[Any]]], children: List[Tuple[str, Optional[List[Any]]]]) &#45;&gt; int:&#10;Return index of subtree in `children` to be selected for expansion.&#10;Defaults to random.">
<text text-anchor="start" x="8" y="-271" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node2_12"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_node_randomly(self, node: Tuple[str, Optional[List[Any]]]) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Choose a random expansion for `node` and return it">
<text text-anchor="start" x="8" y="-258.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">expand_node_randomly()</text>
</a>
</g>
<g id="a_node2_13"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree(self, tree: Tuple[str, Optional[List[Any]]]) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Expand `tree` in a three&#45;phase strategy until all expansions are complete.">
<text text-anchor="start" x="8" y="-245.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">expand_tree()</text>
</a>
</g>
<g id="a_node2_14"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_once(self, tree: Tuple[str, Optional[List[Any]]]) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text text-anchor="start" x="8" y="-232.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node2_15"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="expand_tree_with_strategy(self, tree: Tuple[str, Optional[List[Any]]], expand_node_method: Callable, limit: Optional[int] = None):&#10;Expand tree using `expand_node_method` as node expansion function&#10;until the number of possible expansions reaches `limit`.">
<text text-anchor="start" x="8" y="-220" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">expand_tree_with_strategy()</text>
</a>
</g>
<g id="a_node2_16"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text text-anchor="start" x="8" y="-207.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node2_17"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; Tuple[str, Optional[List[Any]]]:&#10;Produce a derivation tree from the grammar.">
<text text-anchor="start" x="8" y="-194.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node2_18"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="log_tree(self, tree: Tuple[str, Optional[List[Any]]]) &#45;&gt; None:&#10;Output a tree if self.log is set; if self.display is also set, show the tree structure">
<text text-anchor="start" x="8" y="-181.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">log_tree()</text>
</a>
</g>
<g id="a_node2_19"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="process_chosen_children(self, chosen_children: List[Tuple[str, Optional[List[Any]]]], expansion: Union[str, Tuple[str, Dict[str, Any]]]) &#45;&gt; List[Tuple[str, Optional[List[Any]]]]:&#10;Process children after selection. &#160;By default, does nothing.">
<text text-anchor="start" x="8" y="-169" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node2_20"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text text-anchor="start" x="8" y="-156.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ConcolicGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge1" class="edge">
<title>ConcolicGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M89,-111.49C89,-119.42 89,-127.81 89,-136.38"/>
<polygon fill="none" stroke="black" points="85.5,-136.2 89,-146.2 92.5,-136.2 85.5,-136.2"/>
</g>
<!-- Fuzzer -->
<g id="node3" class="node">
<title>Fuzzer</title>
<g id="a_node3"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="51,-384.75 51,-469.75 127,-469.75 127,-384.75 51,-384.75"/>
<text text-anchor="start" x="68.38" y="-453.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="51,-443.75 127,-443.75"/>
<g id="a_node3_21"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node3_22"><a xlink:href="Fuzzer.ipynb" xlink:title="__init__(self) &#45;&gt; None:&#10;Constructor">
<text text-anchor="start" x="59" y="-431.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_23"><a xlink:href="Fuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Return fuzz input">
<text text-anchor="start" x="59" y="-418.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node3_24"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text text-anchor="start" x="59" y="-405.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node3_25"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text text-anchor="start" x="59" y="-393" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge2" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M89,-348.19C89,-356.7 89,-365.08 89,-373.01"/>
<polygon fill="none" stroke="black" points="85.5,-372.74 89,-382.74 92.5,-372.74 85.5,-372.74"/>
</g>
<!-- Legend -->
<g id="node4" class="node">
<title>Legend</title>
<text text-anchor="start" x="190.38" y="-71.75" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text text-anchor="start" x="190.38" y="-61.75" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="196.38" y="-61.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text text-anchor="start" x="190.38" y="-51.75" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="196.38" y="-51.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text text-anchor="start" x="190.38" y="-41.75" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text text-anchor="start" x="196.38" y="-41.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text text-anchor="start" x="190.38" y="-32.7" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>

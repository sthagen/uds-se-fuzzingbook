<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 13.1.2 (20250808.2320)
 -->
<!-- Pages: 1 -->
<svg width="566pt" height="877pt"
 viewBox="0.00 0.00 566.00 877.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 872.75)">
<g id="a_graph0"><a xlink:title="PGGCFuzzer class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-872.75 561.75,-872.75 561.75,4 -4,4"/>
</a>
</g>
<!-- PGGCFuzzer -->
<g id="node1" class="node">
<title>PGGCFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class PGGCFuzzer:&#10;The one grammar&#45;based fuzzer that supports all fuzzingbook features">
<polygon fill="none" stroke="black" points="154.12,-6.5 154.12,-42.5 245.88,-42.5 245.88,-6.5 154.12,-6.5"/>
<text xml:space="preserve" text-anchor="start" x="162.12" y="-21.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">PGGCFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer -->
<g id="node2" class="node">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class ProbabilisticGeneratorGrammarCoverageFuzzer:&#10;Join the features of `GeneratorGrammarFuzzer`&#10;and `ProbabilisticGrammarCoverageFuzzer`">
<polygon fill="none" stroke="black" points="44.62,-85.5 44.62,-183.25 355.38,-183.25 355.38,-85.5 44.62,-85.5"/>
<text xml:space="preserve" text-anchor="start" x="52.62" y="-166.95" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGeneratorGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="44.62,-157.25 355.38,-157.25"/>
<g id="a_node2_0"><a xlink:href="#" xlink:title="ProbabilisticGeneratorGrammarCoverageFuzzer">
<g id="a_node2_1"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], *, replacement_attempts: int = 10, **kwargs) &#45;&gt; None:&#10;Constructor.&#10;`replacement_attempts` &#45; see `GeneratorGrammarFuzzer` constructor.&#10;All other keywords go into `ProbabilisticGrammarFuzzer`.">
<text xml:space="preserve" text-anchor="start" x="143" y="-144.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node2_2"><a xlink:href="#" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text xml:space="preserve" text-anchor="start" x="143" y="-132" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node2_3"><a xlink:href="#" xlink:title="add_tree_coverage(self, tree: DerivationTree) &#45;&gt; None">
<text xml:space="preserve" text-anchor="start" x="143" y="-118.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_tree_coverage()</text>
</a>
</g>
<g id="a_node2_4"><a xlink:href="#" xlink:title="restart_expansion(self) &#45;&gt; None">
<text xml:space="preserve" text-anchor="start" x="143" y="-106.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restart_expansion()</text>
</a>
</g>
<g id="a_node2_5"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text xml:space="preserve" text-anchor="start" x="143" y="-93.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- PGGCFuzzer&#45;&gt;ProbabilisticGeneratorGrammarCoverageFuzzer -->
<g id="edge1" class="edge">
<title>PGGCFuzzer&#45;&gt;ProbabilisticGeneratorGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M200,-42.83C200,-51.5 200,-62.55 200,-73.93"/>
<polygon fill="none" stroke="black" points="196.5,-73.84 200,-83.84 203.5,-73.84 196.5,-73.84"/>
</g>
<!-- GeneratorGrammarFuzzer -->
<g id="node3" class="node">
<title>GeneratorGrammarFuzzer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class GeneratorGrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="0,-366.25 0,-578.75 184,-578.75 184,-366.25 0,-366.25"/>
<text xml:space="preserve" text-anchor="start" x="11.38" y="-562.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GeneratorGrammarFuzzer</text>
<polyline fill="none" stroke="black" points="0,-552.75 184,-552.75"/>
<g id="a_node3_6"><a xlink:href="#" xlink:title="GeneratorGrammarFuzzer">
<g id="a_node3_7"><a xlink:href="#" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], replacement_attempts: int = 10, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text xml:space="preserve" text-anchor="start" x="8" y="-540.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_8"><a xlink:href="#" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text xml:space="preserve" text-anchor="start" x="8" y="-527.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
<g id="a_node3_9"><a xlink:href="#" xlink:title="apply_result(self, result: Any, children: List[DerivationTree]) &#45;&gt; List[DerivationTree]">
<text xml:space="preserve" text-anchor="start" x="8" y="-513.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">apply_result()</text>
</a>
</g>
<g id="a_node3_10"><a xlink:href="#" xlink:title="choose_tree_expansion(self, tree: DerivationTree, expandable_children: List[DerivationTree]) &#45;&gt; int:&#10;Return index of subtree in `expandable_children`&#10;to be selected for expansion. Defaults to random.">
<text xml:space="preserve" text-anchor="start" x="8" y="-502" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_tree_expansion()</text>
</a>
</g>
<g id="a_node3_11"><a xlink:href="#" xlink:title="eval_function(self, tree, function)">
<text xml:space="preserve" text-anchor="start" x="8" y="-488.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">eval_function()</text>
</a>
</g>
<g id="a_node3_12"><a xlink:href="#" xlink:title="expand_tree_once(self, tree: DerivationTree) &#45;&gt; DerivationTree:&#10;Choose an unexpanded symbol in tree; expand it.&#10;Can be overloaded in subclasses.">
<text xml:space="preserve" text-anchor="start" x="8" y="-476.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">expand_tree_once()</text>
</a>
</g>
<g id="a_node3_13"><a xlink:href="#" xlink:title="find_expansion(self, tree)">
<text xml:space="preserve" text-anchor="start" x="8" y="-462.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">find_expansion()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="process_chosen_children(self, children: List[DerivationTree], expansion: Expansion) &#45;&gt; List[DerivationTree]:&#10;Process children after selection. &#160;By default, does nothing.">
<text xml:space="preserve" text-anchor="start" x="8" y="-451" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">process_chosen_children()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="reset_generators(self) &#45;&gt; None">
<text xml:space="preserve" text-anchor="start" x="8" y="-437.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">reset_generators()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="restart_expansion(self) &#45;&gt; None">
<text xml:space="preserve" text-anchor="start" x="8" y="-425.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">restart_expansion()</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="#" xlink:title="run_generator(self, expansion: Expansion, function: Callable) &#45;&gt; Iterator">
<text xml:space="preserve" text-anchor="start" x="8" y="-411.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_generator()</text>
</a>
</g>
<g id="a_node3_18"><a xlink:href="#" xlink:title="run_post_functions(self, tree: DerivationTree, depth: Union[int, float] = inf) &#45;&gt; Tuple[bool, Optional[List[DerivationTree]]]">
<text xml:space="preserve" text-anchor="start" x="8" y="-399" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_post_functions()</text>
</a>
</g>
<g id="a_node3_19"><a xlink:href="#" xlink:title="run_post_functions_locally(self, new_tree: DerivationTree) &#45;&gt; DerivationTree">
<text xml:space="preserve" text-anchor="start" x="8" y="-386.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">run_post_functions_locally()</text>
</a>
</g>
<g id="a_node3_20"><a xlink:href="#" xlink:title="supported_opts(self) &#45;&gt; Set[str]:&#10;Set of supported options. To be overloaded in subclasses.">
<text xml:space="preserve" text-anchor="start" x="8" y="-374.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">supported_opts()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;GeneratorGrammarFuzzer -->
<g id="edge2" class="edge">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;GeneratorGrammarFuzzer</title>
<path fill="none" stroke="black" d="M184.53,-183.53C170.2,-228.14 148.31,-296.25 129.42,-355.03"/>
<polygon fill="none" stroke="black" points="126.12,-353.86 126.4,-364.45 132.79,-356 126.12,-353.86"/>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer -->
<g id="node6" class="node">
<title>ProbabilisticGrammarCoverageFuzzer</title>
<g id="a_node6"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="class ProbabilisticGrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="184.38,-220.25 184.38,-256.25 433.62,-256.25 433.62,-220.25 184.38,-220.25"/>
<text xml:space="preserve" text-anchor="start" x="192.38" y="-234.95" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarCoverageFuzzer -->
<g id="edge5" class="edge">
<title>ProbabilisticGeneratorGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M251.63,-183.63C262.14,-193.45 272.79,-203.4 282.01,-212.03"/>
<polygon fill="none" stroke="black" points="279.57,-214.53 289.26,-218.8 284.35,-209.42 279.57,-214.53"/>
</g>
<!-- GrammarFuzzer -->
<g id="node4" class="node">
<title>GrammarFuzzer</title>
<g id="a_node4"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="176.12,-699.5 176.12,-771.75 291.88,-771.75 291.88,-699.5 176.12,-699.5"/>
<text xml:space="preserve" text-anchor="start" x="184.12" y="-755.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="176.12,-745.75 291.88,-745.75"/>
<g id="a_node4_21"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node4_22"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text xml:space="preserve" text-anchor="start" x="201" y="-733.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_23"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text xml:space="preserve" text-anchor="start" x="201" y="-720.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node4_24"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text xml:space="preserve" text-anchor="start" x="201" y="-707.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GeneratorGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge3" class="edge">
<title>GeneratorGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M85.42,-579.11C88.01,-608.15 95.17,-638.39 111,-663 123.98,-683.18 144.82,-698.36 165.67,-709.42"/>
<polygon fill="none" stroke="black" points="164.02,-712.51 174.53,-713.85 167.15,-706.25 164.02,-712.51"/>
</g>
<!-- Fuzzer -->
<g id="node5" class="node">
<title>Fuzzer</title>
<g id="a_node5"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="205.38,-808.75 205.38,-868.25 262.62,-868.25 262.62,-808.75 205.38,-808.75"/>
<text xml:space="preserve" text-anchor="start" x="213.38" y="-851.95" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="205.38,-842.25 262.62,-842.25"/>
<g id="a_node5_25"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node5_26"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text xml:space="preserve" text-anchor="start" x="216" y="-829.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node5_27"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text xml:space="preserve" text-anchor="start" x="216" y="-817" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge4" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M234,-772.19C234,-780.29 234,-788.94 234,-797.22"/>
<polygon fill="none" stroke="black" points="230.5,-797.06 234,-807.06 237.5,-797.06 230.5,-797.06"/>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node7" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node7"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="222.25,-293.25 222.25,-329.25 395.75,-329.25 395.75,-293.25 222.25,-293.25"/>
<text xml:space="preserve" text-anchor="start" x="230.25" y="-307.95" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer&#45;&gt;GrammarCoverageFuzzer -->
<g id="edge6" class="edge">
<title>ProbabilisticGrammarCoverageFuzzer&#45;&gt;GrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M309,-256.44C309,-264.02 309,-273.15 309,-281.71"/>
<polygon fill="none" stroke="black" points="305.5,-281.71 309,-291.71 312.5,-281.71 305.5,-281.71"/>
</g>
<!-- ProbabilisticGrammarFuzzer -->
<g id="node10" class="node">
<title>ProbabilisticGrammarFuzzer</title>
<g id="a_node10"><a xlink:href="ProbabilisticGrammarFuzzer.ipynb" xlink:title="class ProbabilisticGrammarFuzzer:&#10;A grammar&#45;based fuzzer respecting probabilities in grammars.">
<polygon fill="none" stroke="black" points="366.25,-621.12 366.25,-657.12 557.75,-657.12 557.75,-621.12 366.25,-621.12"/>
<text xml:space="preserve" text-anchor="start" x="374.25" y="-635.83" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">ProbabilisticGrammarFuzzer</text>
</a>
</g>
</g>
<!-- ProbabilisticGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarFuzzer -->
<g id="edge10" class="edge">
<title>ProbabilisticGrammarCoverageFuzzer&#45;&gt;ProbabilisticGrammarFuzzer</title>
<path fill="none" stroke="black" d="M356.9,-256.68C374.27,-265.15 392.64,-276.98 405,-292.75 480.03,-388.45 472.59,-545.56 465.77,-609.61"/>
<polygon fill="none" stroke="black" points="462.32,-608.95 464.65,-619.28 469.27,-609.75 462.32,-608.95"/>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node8" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node8"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="201.62,-454.5 201.62,-490.5 416.38,-490.5 416.38,-454.5 201.62,-454.5"/>
<text xml:space="preserve" text-anchor="start" x="209.62" y="-469.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge7" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M309,-329.6C309,-356.88 309,-410.1 309,-443.04"/>
<polygon fill="none" stroke="black" points="305.5,-442.66 309,-452.66 312.5,-442.66 305.5,-442.66"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node9" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node9"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="119.88,-615.75 119.88,-662.5 348.12,-662.5 348.12,-615.75 119.88,-615.75"/>
<text xml:space="preserve" text-anchor="start" x="127.88" y="-646.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="119.88,-636.5 348.12,-636.5"/>
<g id="a_node9_28"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node9_29"><a xlink:href="GrammarCoverageFuzzer.ipynb" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text xml:space="preserve" text-anchor="start" x="204" y="-624" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge8" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M301.12,-490.81C288.78,-517.89 264.7,-570.75 248.99,-605.23"/>
<polygon fill="none" stroke="black" points="245.99,-603.37 245.03,-613.92 252.36,-606.27 245.99,-603.37"/>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge9" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M234,-662.52C234,-670.11 234,-678.9 234,-687.67"/>
<polygon fill="none" stroke="black" points="230.5,-687.58 234,-697.58 237.5,-687.58 230.5,-687.58"/>
</g>
<!-- ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge11" class="edge">
<title>ProbabilisticGrammarFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M419.92,-657.57C387.1,-671.17 340.85,-690.34 302.69,-706.15"/>
<polygon fill="none" stroke="black" points="301.46,-702.88 293.56,-709.94 304.14,-709.34 301.46,-702.88"/>
</g>
<!-- Legend -->
<g id="node11" class="node">
<title>Legend</title>
<text xml:space="preserve" text-anchor="start" x="264.38" y="-40.5" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text xml:space="preserve" text-anchor="start" x="264.38" y="-30.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text xml:space="preserve" text-anchor="start" x="270.38" y="-30.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text xml:space="preserve" text-anchor="start" x="264.38" y="-20.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text xml:space="preserve" text-anchor="start" x="270.38" y="-20.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text xml:space="preserve" text-anchor="start" x="264.38" y="-10.5" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text xml:space="preserve" text-anchor="start" x="270.38" y="-10.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text xml:space="preserve" text-anchor="start" x="264.38" y="-1.45" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>

<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN"
 "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<!-- Generated by graphviz version 13.1.2 (20250808.2320)
 -->
<!-- Pages: 1 -->
<svg width="346pt" height="582pt"
 viewBox="0.00 0.00 346.00 582.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 578)">
<g id="a_graph0"><a xlink:title="GrammarCoverageFuzzer class hierarchy">
<polygon fill="white" stroke="none" points="-4,4 -4,-578 341.75,-578 341.75,4 -4,4"/>
</a>
</g>
<!-- GrammarCoverageFuzzer -->
<g id="node1" class="node">
<title>GrammarCoverageFuzzer</title>
<g id="a_node1"><a xlink:href="#" xlink:title="class GrammarCoverageFuzzer:&#10;Produce from grammars, aiming for coverage of all expansions.">
<polygon fill="none" stroke="black" points="27.38,-0.5 27.38,-85.5 200.88,-85.5 200.88,-0.5 27.38,-0.5"/>
<text xml:space="preserve" text-anchor="start" x="35.38" y="-69.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="27.38,-59.5 200.88,-59.5"/>
<g id="a_node1_0"><a xlink:href="#" xlink:title="GrammarCoverageFuzzer">
<g id="a_node1_1"><a xlink:href="#" xlink:title="_new_child_coverage(self, children: List[DerivationTree], max_depth: Union[int, float]) &#45;&gt; Set[str]">
<text xml:space="preserve" text-anchor="start" x="45.12" y="-46" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_new_child_coverage()</text>
</a>
</g>
<g id="a_node1_2"><a xlink:href="#" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Choose an expansion of `node` among `children_alternatives`.&#10;Return `n` such that expanding `children_alternatives[n]`&#10;yields the highest additional coverage.">
<text xml:space="preserve" text-anchor="start" x="45.12" y="-34.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node1_3"><a xlink:href="#" xlink:title="new_child_coverage(self, symbol: str, children: List[DerivationTree], max_depth: Union[int, float] = inf) &#45;&gt; Set[str]:&#10;Return new coverage that would be obtained&#10;by expanding (`symbol`, `children`)">
<text xml:space="preserve" text-anchor="start" x="45.12" y="-20.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_child_coverage()</text>
</a>
</g>
<g id="a_node1_4"><a xlink:href="#" xlink:title="new_coverages(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; Optional[List[Set[str]]]:&#10;Return coverage to be obtained for each child at minimum depth">
<text xml:space="preserve" text-anchor="start" x="45.12" y="-7.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">new_coverages()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer -->
<g id="node2" class="node">
<title>SimpleGrammarCoverageFuzzer</title>
<g id="a_node2"><a xlink:href="#" xlink:title="class SimpleGrammarCoverageFuzzer:&#10;When choosing expansions, prefer expansions not covered.">
<polygon fill="none" stroke="black" points="6.75,-122.5 6.75,-194.75 221.5,-194.75 221.5,-122.5 6.75,-122.5"/>
<text xml:space="preserve" text-anchor="start" x="14.75" y="-178.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">SimpleGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="6.75,-168.75 221.5,-168.75"/>
<g id="a_node2_5"><a xlink:href="#" xlink:title="SimpleGrammarCoverageFuzzer">
<g id="a_node2_6"><a xlink:href="#" xlink:title="choose_covered_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in _covered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text xml:space="preserve" text-anchor="start" x="15.12" y="-156.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_covered_node_expansion()</text>
</a>
</g>
<g id="a_node2_7"><a xlink:href="#" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;Picks uncovered expansions, if any.">
<text xml:space="preserve" text-anchor="start" x="15.12" y="-143.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
<g id="a_node2_8"><a xlink:href="#" xlink:title="choose_uncovered_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in _uncovered_ `children_alternatives`&#10;to be selected.&#10;To be overloaded in subclasses.">
<text xml:space="preserve" text-anchor="start" x="15.12" y="-130.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_uncovered_node_expansion()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer -->
<g id="edge1" class="edge">
<title>GrammarCoverageFuzzer&#45;&gt;SimpleGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M114.12,-85.99C114.12,-94.06 114.12,-102.57 114.12,-110.79"/>
<polygon fill="none" stroke="black" points="110.63,-110.63 114.13,-120.63 117.63,-110.63 110.63,-110.63"/>
</g>
<!-- TrackingGrammarCoverageFuzzer -->
<g id="node3" class="node">
<title>TrackingGrammarCoverageFuzzer</title>
<g id="a_node3"><a xlink:href="#" xlink:title="class TrackingGrammarCoverageFuzzer:&#10;Track grammar coverage during production">
<polygon fill="none" stroke="black" points="0,-231.75 0,-367.75 228.25,-367.75 228.25,-231.75 0,-231.75"/>
<text xml:space="preserve" text-anchor="start" x="8" y="-351.45" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">TrackingGrammarCoverageFuzzer</text>
<polyline fill="none" stroke="black" points="0,-341.75 228.25,-341.75"/>
<g id="a_node3_9"><a xlink:href="#" xlink:title="TrackingGrammarCoverageFuzzer">
<g id="a_node3_10"><a xlink:href="#" xlink:title="__init__(self, *args, **kwargs) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text xml:space="preserve" text-anchor="start" x="30.12" y="-329.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node3_11"><a xlink:href="#" xlink:title="expansion_coverage(self) &#45;&gt; Set[str]:&#10;Return the set of covered expansions as strings SYMBOL &#45;&gt; EXPANSION">
<text xml:space="preserve" text-anchor="start" x="30.12" y="-316.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">expansion_coverage()</text>
</a>
</g>
<g id="a_node3_12"><a xlink:href="#" xlink:title="max_expansion_coverage(self, symbol: Optional[str] = None, max_depth: Union[int, float] = inf) &#45;&gt; Set[str]:&#10;Return set of all expansions in a grammar&#10;starting with `symbol` (default: start symbol).&#10;If `max_depth` is given, expand only to that depth.">
<text xml:space="preserve" text-anchor="start" x="30.12" y="-303.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">max_expansion_coverage()</text>
</a>
</g>
<g id="a_node3_13"><a xlink:href="#" xlink:title="missing_expansion_coverage(self) &#45;&gt; Set[str]:&#10;Return expansions not covered yet">
<text xml:space="preserve" text-anchor="start" x="30.12" y="-291" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">missing_expansion_coverage()</text>
</a>
</g>
<g id="a_node3_14"><a xlink:href="#" xlink:title="reset_coverage(self) &#45;&gt; None:&#10;Clear coverage info tracked so far">
<text xml:space="preserve" text-anchor="start" x="30.12" y="-278.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">reset_coverage()</text>
</a>
</g>
<g id="a_node3_15"><a xlink:href="#" xlink:title="_max_expansion_coverage(self, symbol: str, max_depth: Union[int, float]) &#45;&gt; Set[str]">
<text xml:space="preserve" text-anchor="start" x="30.12" y="-264.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">_max_expansion_coverage()</text>
</a>
</g>
<g id="a_node3_16"><a xlink:href="#" xlink:title="add_coverage(self, symbol: str, new_child: Union[str, Tuple[str, Dict[str, Any]], List[DerivationTree]]) &#45;&gt; None">
<text xml:space="preserve" text-anchor="start" x="30.12" y="-251.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="10.00">add_coverage()</text>
</a>
</g>
<g id="a_node3_17"><a xlink:href="#" xlink:title="choose_node_expansion(self, node: DerivationTree, children_alternatives: List[List[DerivationTree]]) &#45;&gt; int:&#10;Return index of expansion in `children_alternatives` to be selected.&#10;&#39;children_alternatives`: a list of possible children for `node`.&#10;Defaults to random. To be overloaded in subclasses.">
<text xml:space="preserve" text-anchor="start" x="30.12" y="-240" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="10.00">choose_node_expansion()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer -->
<g id="edge2" class="edge">
<title>SimpleGrammarCoverageFuzzer&#45;&gt;TrackingGrammarCoverageFuzzer</title>
<path fill="none" stroke="black" d="M114.12,-195.09C114.12,-202.82 114.12,-211.29 114.12,-219.95"/>
<polygon fill="none" stroke="black" points="110.63,-219.89 114.13,-229.89 117.63,-219.89 110.63,-219.89"/>
</g>
<!-- GrammarFuzzer -->
<g id="node4" class="node">
<title>GrammarFuzzer</title>
<g id="a_node4"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="class GrammarFuzzer:&#10;Produce strings from grammars efficiently, using derivation trees.">
<polygon fill="none" stroke="black" points="56.25,-404.75 56.25,-477 172,-477 172,-404.75 56.25,-404.75"/>
<text xml:space="preserve" text-anchor="start" x="64.25" y="-460.7" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">GrammarFuzzer</text>
<polyline fill="none" stroke="black" points="56.25,-451 172,-451"/>
<g id="a_node4_18"><a xlink:href="#" xlink:title="GrammarFuzzer">
<g id="a_node4_19"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="__init__(self, grammar: Dict[str, List[Expansion]], start_symbol: str = &#39;&lt;start&gt;&#39;, min_nonterminals: int = 0, max_nonterminals: int = 10, disp: bool = False, log: Union[bool, int] = False) &#45;&gt; None:&#10;Produce strings from `grammar`, starting with `start_symbol`.&#10;If `min_nonterminals` or `max_nonterminals` is given, use them as limits&#10;for the number of nonterminals produced.&#10;If `disp` is set, display the intermediate derivation trees.&#10;If `log` is set, show intermediate steps as text on standard output.">
<text xml:space="preserve" text-anchor="start" x="81.12" y="-438.5" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">__init__()</text>
</a>
</g>
<g id="a_node4_20"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz(self) &#45;&gt; str:&#10;Produce a string from the grammar.">
<text xml:space="preserve" text-anchor="start" x="81.12" y="-425.75" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-style="italic" font-size="10.00">fuzz()</text>
</a>
</g>
<g id="a_node4_21"><a xlink:href="GrammarFuzzer.ipynb" xlink:title="fuzz_tree(self) &#45;&gt; DerivationTree:&#10;Produce a derivation tree from the grammar.">
<text xml:space="preserve" text-anchor="start" x="81.12" y="-413" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">fuzz_tree()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer -->
<g id="edge3" class="edge">
<title>TrackingGrammarCoverageFuzzer&#45;&gt;GrammarFuzzer</title>
<path fill="none" stroke="black" d="M114.12,-367.87C114.12,-376.36 114.12,-384.91 114.12,-393"/>
<polygon fill="none" stroke="black" points="110.63,-392.94 114.13,-402.94 117.63,-392.94 110.63,-392.94"/>
</g>
<!-- Fuzzer -->
<g id="node5" class="node">
<title>Fuzzer</title>
<g id="a_node5"><a xlink:href="Fuzzer.ipynb" xlink:title="class Fuzzer:&#10;Base class for fuzzers.">
<polygon fill="none" stroke="black" points="85.5,-514 85.5,-573.5 142.75,-573.5 142.75,-514 85.5,-514"/>
<text xml:space="preserve" text-anchor="start" x="93.5" y="-557.2" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="14.00" fill="#b03a2e">Fuzzer</text>
<polyline fill="none" stroke="black" points="85.5,-547.5 142.75,-547.5"/>
<g id="a_node5_22"><a xlink:href="#" xlink:title="Fuzzer">
<g id="a_node5_23"><a xlink:href="Fuzzer.ipynb" xlink:title="run(self, runner: Fuzzer.Runner = &lt;Fuzzer.Runner object&gt;) &#45;&gt; Tuple[subprocess.CompletedProcess, str]:&#10;Run `runner` with fuzz input">
<text xml:space="preserve" text-anchor="start" x="96.12" y="-535" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">run()</text>
</a>
</g>
<g id="a_node5_24"><a xlink:href="Fuzzer.ipynb" xlink:title="runs(self, runner: Fuzzer.Runner = &lt;Fuzzer.PrintRunner object&gt;, trials: int = 10) &#45;&gt; List[Tuple[subprocess.CompletedProcess, str]]:&#10;Run `runner` with fuzz input, `trials` times">
<text xml:space="preserve" text-anchor="start" x="96.12" y="-522.25" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="10.00">runs()</text>
</a>
</g>
</a>
</g>
</a>
</g>
</g>
<!-- GrammarFuzzer&#45;&gt;Fuzzer -->
<g id="edge4" class="edge">
<title>GrammarFuzzer&#45;&gt;Fuzzer</title>
<path fill="none" stroke="black" d="M114.12,-477.44C114.12,-485.54 114.12,-494.19 114.12,-502.47"/>
<polygon fill="none" stroke="black" points="110.63,-502.31 114.13,-512.31 117.63,-502.31 110.63,-502.31"/>
</g>
<!-- Legend -->
<g id="node6" class="node">
<title>Legend</title>
<text xml:space="preserve" text-anchor="start" x="218.5" y="-59" font-family="Patua One, Helvetica, sans-serif" font-weight="bold" font-size="10.00" fill="#b03a2e">Legend</text>
<text xml:space="preserve" text-anchor="start" x="218.5" y="-49" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text xml:space="preserve" text-anchor="start" x="224.5" y="-49" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-weight="bold" font-size="8.00">public_method()</text>
<text xml:space="preserve" text-anchor="start" x="218.5" y="-39" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text xml:space="preserve" text-anchor="start" x="224.5" y="-39" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-size="8.00">private_method()</text>
<text xml:space="preserve" text-anchor="start" x="218.5" y="-29" font-family="Patua One, Helvetica, sans-serif" font-size="10.00">• </text>
<text xml:space="preserve" text-anchor="start" x="224.5" y="-29" font-family="'Fira Mono', 'Source Code Pro', 'Courier', monospace" font-style="italic" font-size="8.00">overloaded_method()</text>
<text xml:space="preserve" text-anchor="start" x="218.5" y="-19.95" font-family="Helvetica,sans-Serif" font-size="9.00">Hover over names to see doc</text>
</g>
</g>
</svg>
